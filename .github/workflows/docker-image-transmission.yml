name: Build transmission image

on:
  workflow_dispatch:
    inputs:
      buildArgs:
        description: "Pass --build-arg to docker build"
        default: ""
        required: false
  schedule:
    - cron: "27 5 * * 6"
  push:
    branches:
      - master
    paths:
      - "transmission/Dockerfile"
      - ".github/workflows/docker-image-transmission.yml"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  CONTEXT_PATH: ./transmission
  IMAGE_NAME: ${{ github.repository_owner }}/transmission

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Alpine image version
        id: get_alpine_version
        run: >-
          curl 'https://img.shields.io/docker/v/_/alpine?arch=amd64' |
          awk -Fv '{gsub(/<[^>]*>/, " "); print "ALPINE_VER="$(NF-1)}'
          >> $GITHUB_ENV

      - name: Get the version
        id: get_version
        run: >-
          curl -s 'https://repology.org/badge/version-for-repo/alpine_$(echo ${{ env.ALPINE_VER }} | cut -d. -f-2 | tr . _)/transmission.svg' |
          awk '{gsub(/<[^>]*>/, " "); print "TAG_VER="$(NF-1)}' >> $GITHUB_ENV

      - name: Get the version from buildArgs
        if: (github.event_name == 'workflow_dispatch') && (github.event.inputs.buildArgs != '')
        id: get_version_build_args
        # NOTE: build arg *_VER[SION]= should be passed first
        run: >-
          awk -F= '/_VER(SION)?=/ {if ($2 != "" ) print "TAG_VER="$2;}'
          <<< ${{ github.event.inputs.buildArgs }} >> $GITHUB_ENV

      # Build and push Docker images with Buildx
      # https://github.com/docker/build-push-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=match,priority=900,pattern=\d,prefix=v,value=${{ env.TAG_VER }}
            type=match,priority=890,pattern=\d.\d+,value=${{ env.TAG_VER }}
            type=schedule,priority=700,pattern={{date 'YYYYMMDD'}}
            type=ref,priority=600,event=branch,enable=${{ github.event_name == 'push' }}
          flavor: latest=true
          labels: |
            org.opencontainers.image.title=Transmission
            org.opencontainers.image.description=Lightweight torrent client with WebUI
            org.opencontainers.image.url=https://github.com/SmartFinn/Dockerfiles/pkgs/container/transmission

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.CONTEXT_PATH }}
          build-args: ${{ github.event.inputs.buildArgs }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
